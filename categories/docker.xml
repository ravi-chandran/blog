<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RC Notebook (Posts about docker)</title><link>https://ravi-chandran.github.io/</link><description></description><atom:link href="https://ravi-chandran.github.io/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:"&gt;Ravi Chandran&lt;/a&gt; 
&lt;br&gt;&lt;a rel="license" href="https://opensource.org/licenses/MIT"&gt;MIT License for Software, &lt;/a&gt;
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons License CC BY 4.0 for other items&lt;/a&gt;
</copyright><lastBuildDate>Wed, 25 Dec 2019 15:42:20 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Docker Tricks And Tips</title><link>https://ravi-chandran.github.io/posts/docker/docker-tricks-and-tips/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;In a previous &lt;a href="https://ravi-chandran.github.io/posts/docker/dockerizing-a-build-system/"&gt;post&lt;/a&gt;, I covered an approach for dockerizing a software build system. In this article, I discuss some techniques I've found useful while iterating on a Dockerfile to get it just right. For example, if the Dockerfile involves downloading and installing a 5GB file, each iteration of "&lt;code&gt;docker image build&lt;/code&gt;" could take a lot of time even with good network speeds.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/docker/docker-tricks-and-tips/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>build system</category><category>docker</category><category>HTTP server</category><guid>https://ravi-chandran.github.io/posts/docker/docker-tricks-and-tips/</guid><pubDate>Sat, 07 Dec 2019 05:00:00 GMT</pubDate></item><item><title>Dockerizing A Build System</title><link>https://ravi-chandran.github.io/posts/docker/dockerizing-a-build-system/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="" src="https://ravi-chandran.github.io/images/docker/business-1845350_640.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After creating a few build systems using Docker recently, I think I have a decent, repeatable approach that's worth writing down. These build systems were used for generating loadable software images for embedded hardware as well as for compiling machine learning algorithms. &lt;/p&gt;
&lt;p&gt;The approach discussed here is about how to create or organize the build system in a way that makes it easy to use and maintain. It's not about the tricks needed to deal with dockerizing any particular software compilers or tools. This approach applies to the common use case of building software by software developers who will be our end users. The build system itself will be abstracted away from our end users so that they can focus on the software.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/docker/dockerizing-a-build-system/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>build system</category><category>docker</category><guid>https://ravi-chandran.github.io/posts/docker/dockerizing-a-build-system/</guid><pubDate>Sun, 03 Nov 2019 04:00:00 GMT</pubDate></item></channel></rss>