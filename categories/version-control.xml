<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RC Notebook (Posts about version control)</title><link>https://ravi-chandran.github.io/</link><description></description><atom:link href="https://ravi-chandran.github.io/categories/version-control.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:"&gt;Ravi Chandran&lt;/a&gt; 
&lt;br&gt;&lt;a rel="license" href="https://opensource.org/licenses/MIT"&gt;MIT License for Software, &lt;/a&gt;
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons License CC BY 4.0 for other items&lt;/a&gt;
</copyright><lastBuildDate>Sat, 25 Apr 2020 19:22:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Recommendations for a git beginner</title><link>https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;I started using &lt;code&gt;git&lt;/code&gt; several years ago. The sophisticated way in which &lt;code&gt;git&lt;/code&gt; swaps files back and forth "under the hood" (inside the mysterious &lt;code&gt;.git&lt;/code&gt; folder) when changing branches still amazes me to this day. In my first job years ago where I worked on signal processing research, none of the researchers used any formal version control systems. Every day, I would make a "just-in-case" backup of my code that was in a good working state before making further changes. Even after I started using &lt;code&gt;git&lt;/code&gt;, there was an initial period of anxiety when I made such backups because I didn't really know all the ways of undoing changes with &lt;code&gt;git&lt;/code&gt; and feared a mishap.&lt;/p&gt;
&lt;p&gt;I wish I had known about the approaches and opportunities for code management that &lt;code&gt;git&lt;/code&gt; provides beyond the high level explanations about its importance. While there is a staggering amount of documentation and tutorials on &lt;code&gt;git&lt;/code&gt;, it is a sophisticated tool that is impossible to learn all at once while also trying to focus on the application you're developing.&lt;/p&gt;
&lt;p&gt;This is not a complete tutorial on &lt;code&gt;git&lt;/code&gt; but a sequence of stages to gently evolve your knowledge and use of &lt;code&gt;git&lt;/code&gt;. Had I known these stages beforehand, I would have stumbled less along my journey with &lt;code&gt;git&lt;/code&gt;. In this first article, I'm going to outline how to evolve your usage of &lt;code&gt;git&lt;/code&gt; in a one-person project.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>source control</category><category>version control</category><guid>https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/</guid><pubDate>Sat, 11 Apr 2020 04:00:00 GMT</pubDate></item></channel></rss>