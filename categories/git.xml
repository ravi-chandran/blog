<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RC Notebook (Posts about git)</title><link>https://ravi-chandran.github.io/</link><description></description><atom:link href="https://ravi-chandran.github.io/categories/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:"&gt;Ravi Chandran&lt;/a&gt; 
&lt;br&gt;&lt;a rel="license" href="https://opensource.org/licenses/MIT"&gt;MIT License for Software, &lt;/a&gt;
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons License CC BY 4.0 for other items&lt;/a&gt;
</copyright><lastBuildDate>Sat, 09 May 2020 20:15:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Git setup in 5 minutes</title><link>https://ravi-chandran.github.io/posts/git/git-setup-in-5-minutes/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;I've had these notes regarding &lt;code&gt;git&lt;/code&gt; setup in Linux for a while and decided it would be good to add it to the blog for future reference. Setting up &lt;code&gt;git&lt;/code&gt; and SSH is a little tricky. For example, if you don't have all the file permissions just right for your SSH setup, things will just not work. Setup involves piecing together information from multiple web searches, so collecting it all here is useful.&lt;/p&gt;
&lt;p&gt;Some of the notes also explain how you can copy &lt;code&gt;git&lt;/code&gt; and SSH configurations from Windows to a Linux VM (e.g. WSL2 or VirtualBox-based).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/git/git-setup-in-5-minutes/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>SSH</category><guid>https://ravi-chandran.github.io/posts/git/git-setup-in-5-minutes/</guid><pubDate>Sat, 02 May 2020 04:00:00 GMT</pubDate></item><item><title>Working effectively as a team with git</title><link>https://ravi-chandran.github.io/posts/git/working-effectively-as-a-team-with-git/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;In the &lt;a href="https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/"&gt;previous post&lt;/a&gt; in this series on evolving your use of &lt;code&gt;git&lt;/code&gt;, I outlined how &lt;code&gt;git&lt;/code&gt; can be used in a one-person project. &lt;/p&gt;
&lt;p&gt;In this post, I'll outline additional things you may need to learn about &lt;code&gt;git&lt;/code&gt; to work effectively as part of a team.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/git/working-effectively-as-a-team-with-git/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>source control</category><category>version control</category><guid>https://ravi-chandran.github.io/posts/git/working-effectively-as-a-team-with-git/</guid><pubDate>Sat, 18 Apr 2020 04:00:00 GMT</pubDate></item><item><title>Recommendations for a git beginner</title><link>https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;I started using &lt;code&gt;git&lt;/code&gt; several years ago. The sophisticated way in which &lt;code&gt;git&lt;/code&gt; swaps files back and forth "under the hood" (inside the mysterious &lt;code&gt;.git&lt;/code&gt; folder) when changing branches still amazes me to this day. In my first job years ago where I worked on signal processing research, none of the researchers used any formal version control systems. Every day, I would make a "just-in-case" backup of my code that was in a good working state before making further changes. Even after I started using &lt;code&gt;git&lt;/code&gt;, there was an initial period of anxiety when I made such backups because I didn't really know all the ways of undoing changes with &lt;code&gt;git&lt;/code&gt; and feared a mishap.&lt;/p&gt;
&lt;p&gt;I wish I had known about the approaches and opportunities for code management that &lt;code&gt;git&lt;/code&gt; provides beyond the high level explanations about its importance. While there is a staggering amount of documentation and tutorials on &lt;code&gt;git&lt;/code&gt;, it is a sophisticated tool that is impossible to learn all at once while also trying to focus on the application you're developing.&lt;/p&gt;
&lt;p&gt;This is not a complete tutorial on &lt;code&gt;git&lt;/code&gt; but a sequence of stages to gently evolve your knowledge and use of &lt;code&gt;git&lt;/code&gt;. Had I known these stages beforehand, I would have stumbled less along my journey with &lt;code&gt;git&lt;/code&gt;. In this first article, I'm going to outline how to evolve your usage of &lt;code&gt;git&lt;/code&gt; in a one-person project.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>source control</category><category>version control</category><guid>https://ravi-chandran.github.io/posts/git/recommendations-for-a-git-beginner/</guid><pubDate>Sat, 11 Apr 2020 04:00:00 GMT</pubDate></item><item><title>Docker-in-Docker And Proxy Settings</title><link>https://ravi-chandran.github.io/posts/docker/docker-in-docker-and-proxy-settings/</link><dc:creator>Ravi Chandran</dc:creator><description>&lt;div&gt;&lt;p&gt;Docker-in-Docker is explained by its author &lt;a href="https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/"&gt;here&lt;/a&gt;. In a nutshell, the recommendation is to not use "true" Docker-in-Docker. Instead, use:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker container run --volume /var/run/docker.sock:/var/run/docker.sock ...
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The above volume mapping provides the container with access to the Docker socket with which it can start more "sibling" containers. But the approach is not a "true" Docker-in-Docker (which is not recommended) and avoids its corresponding issues. The nice thing about this approach is it can work with any Docker image (with some additional items installed as explained in this post).&lt;/p&gt;
&lt;p&gt;Here's a compilation of useful proxy settings that may be required if you work in an organization using proxies and require Docker-in-Docker for your work. In addition, I also outline how to update your Dockerfile so that the corresponding image can support this Docker-in-Docker approach. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://ravi-chandran.github.io/posts/docker/docker-in-docker-and-proxy-settings/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>apt-get</category><category>build system</category><category>corkscrew</category><category>docker</category><category>docker-in-docker</category><category>git</category><category>npm</category><category>proxy</category><category>wget</category><guid>https://ravi-chandran.github.io/posts/docker/docker-in-docker-and-proxy-settings/</guid><pubDate>Sat, 21 Dec 2019 05:00:00 GMT</pubDate></item></channel></rss>